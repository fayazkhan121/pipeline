trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  phpVersions: '7.2,7.4,8.0'
  composerCache: $(Pipeline.Workspace)/.composer

strategy:
  matrix:
    PHP_7_2:
      phpVersion: '7.2'
    PHP_7_4:
      phpVersion: '7.4'
    PHP_8_0:
      phpVersion: '8.0'

steps:
# Set up PHP environment
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(phpVersion)'
    addToPath: true
  displayName: 'Set PHP version $(phpVersion)'

- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Configure PHP version $(phpVersion)'

# Install Composer Dependencies
- task: Cache@2
  inputs:
    key: 'composer | "$(phpVersion)" | **/composer.lock'
    path: '$(composerCache)'
  displayName: 'Cache Composer Dependencies'

- script: composer install --no-interaction --prefer-dist
  displayName: 'Install Dependencies with Composer'

# Run Static Analysis
- script: |
    composer require --dev phpstan/phpstan
    vendor/bin/phpstan analyse src --level=max
  displayName: 'Run PHPStan Static Analysis'
  continueOnError: true

# Run Tests
- script: |
    composer require --dev phpunit/phpunit
    vendor/bin/phpunit --coverage-text
  displayName: 'Run PHPUnit Tests'

# Package Build Artifacts
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy Files to Artifact Staging Directory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'
